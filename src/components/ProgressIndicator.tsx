import React from 'react';
import { ConversationType } from '../types/chat';
import { Target, CheckCircle, Clock } from 'lucide-react';

interface ProgressIndicatorProps {
  currentStep: number;
  totalSteps: number;
  conversationType: ConversationType;
  isVisible: boolean;
}

export default function ProgressIndicator({ 
  currentStep, 
  totalSteps, 
  conversationType,
  isVisible 
}: ProgressIndicatorProps) {
  if (!isVisible) return null;

  // –ü–æ–∫–∞–∑—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –¥–ª—è –ø—Ä–æ—î–∫—Ç–Ω–∏—Ö —Ä–æ–∑–º–æ–≤
  if (conversationType === 'general') return null;

  const progressPercentage = Math.min((currentStep / totalSteps) * 100, 100);
  const remainingSteps = Math.max(totalSteps - currentStep, 0);

  const getStepIcon = (step: number) => {
    if (step < currentStep) {
      return <CheckCircle className="w-4 h-4 text-green-500" />;
    } else if (step === currentStep) {
      return <Target className="w-4 h-4 text-blue-500" />;
    } else {
      return <Clock className="w-4 h-4 text-gray-400" />;
    }
  };

  const getStepText = (step: number) => {
    if (step < currentStep) {
      return '–ó–∞–≤–µ—Ä—à–µ–Ω–æ';
    } else if (step === currentStep) {
      return '–ü–æ—Ç–æ—á–Ω–∏–π –∫—Ä–æ–∫';
    } else {
      return '–û—á—ñ–∫—É—î';
    }
  };

  return (
    <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md border border-gray-200 dark:border-gray-700 p-4 mb-4">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–æ–≥—Ä–µ—Å—É */}
      <div className="flex items-center justify-between mb-4">
        <div className="flex items-center gap-2">
          <Target className="w-5 h-5 text-blue-600" />
          <h4 className="text-sm font-medium text-gray-900 dark:text-white">
            –ü—Ä–æ–≥—Ä–µ—Å –µ—Å—Ç—ñ–º–µ–π—Ç—É
          </h4>
        </div>
        <div className="text-xs text-gray-500 dark:text-gray-400">
          –ö—Ä–æ–∫ {currentStep} –∑ {totalSteps}
        </div>
      </div>

      {/* –ü—Ä–æ–≥—Ä–µ—Å-–±–∞—Ä */}
      <div className="mb-4">
        <div className="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2">
          <div 
            className="bg-blue-600 h-2 rounded-full transition-all duration-500 ease-out"
            style={{ width: `${progressPercentage}%` }}
          />
        </div>
      </div>

      {/* –Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä –∫—Ä–æ–∫—ñ–≤ */}
      <div className="grid grid-cols-5 gap-2 mb-3">
        {Array.from({ length: totalSteps }, (_, index) => (
          <div key={index} className="flex flex-col items-center">
            <div className={`w-8 h-8 rounded-full flex items-center justify-center border-2 transition-all duration-200 ${
              index < currentStep 
                ? 'border-green-500 bg-green-100 dark:bg-green-900/20' 
                : index === currentStep 
                ? 'border-blue-500 bg-blue-100 dark:bg-blue-900/20' 
                : 'border-gray-300 dark:border-gray-600 bg-gray-100 dark:bg-gray-800'
            }`}>
              {getStepIcon(index)}
            </div>
            <div className="text-xs text-center mt-1 text-gray-600 dark:text-gray-400">
              {index + 1}
            </div>
          </div>
        ))}
      </div>

      {/* –¢–µ–∫—Å—Ç –ø—Ä–æ–≥—Ä–µ—Å—É */}
      <div className="text-center">
        {remainingSteps > 0 ? (
          <div className="text-sm text-gray-600 dark:text-gray-400">
            <span className="font-medium">–©–µ {remainingSteps} –∫—Ä–æ–∫{remainingSteps === 1 ? '' : '—ñ–≤'}</span> –¥–æ —Ç–æ—á–Ω—ñ—à–æ–≥–æ –µ—Å—Ç—ñ–º–µ–π—Ç—É
          </div>
        ) : (
          <div className="text-sm text-green-600 dark:text-green-400 font-medium">
            üéâ –ï—Å—Ç—ñ–º–µ–π—Ç –≥–æ—Ç–æ–≤–∏–π!
          </div>
        )}
      </div>

      {/* –î–µ—Ç–∞–ª—å–Ω–∏–π –æ–ø–∏—Å –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫—Ä–æ–∫—É */}
      {currentStep <= totalSteps && (
        <div className="mt-3 p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg">
          <div className="text-xs font-medium text-blue-800 dark:text-blue-200 mb-1">
            –ü–æ—Ç–æ—á–Ω–∏–π –∫—Ä–æ–∫:
          </div>
          <div className="text-sm text-blue-700 dark:text-blue-300">
            {currentStep === 1 && '–í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∏–ø—É –ø—Ä–æ—î–∫—Ç—É'}
            {currentStep === 2 && '–û–ø–∏—Å —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ'}
            {currentStep === 3 && '–¶—ñ–ª—å–æ–≤–∞ –∞—É–¥–∏—Ç–æ—Ä—ñ—è —Ç–∞ –±—é–¥–∂–µ—Ç'}
            {currentStep === 4 && '–¢–µ—Ö–Ω—ñ—á–Ω—ñ –≤–∏–º–æ–≥–∏'}
            {currentStep === 5 && '–§—ñ–Ω–∞–ª—å–Ω–µ —É—Ç–æ—á–Ω–µ–Ω–Ω—è'}
          </div>
        </div>
      )}
    </div>
  );
}
