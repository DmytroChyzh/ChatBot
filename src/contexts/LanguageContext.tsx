'use client';

import React, { createContext, useContext, useState, useEffect } from 'react';

type Language = 'en' | 'uk';

interface LanguageContextType {
  language: Language;
  setLanguage: (lang: Language) => void;
  t: (key: string) => string;
}

const LanguageContext = createContext<LanguageContextType | undefined>(undefined);

// Translations
const translations = {
  en: {
    // Header
    'header.title': 'Cieden Assistant',
    'header.clearSession': 'Clear session',
    'header.lightTheme': 'Light theme',
    'header.darkTheme': 'Dark theme',
    
    // Contact Form
    'contact.title': 'Assistant',
    'contact.subtitle': 'Tell us about your project',
    'contact.namePlaceholder': 'Your name',
    'contact.emailPlaceholder': 'Email',
    'contact.startButton': 'Start Conversation',
    
    // Chat
    'chat.welcome': 'Hello, {name}! üëã',
    'chat.subtitle': 'Tell us about your project or choose one of the options below',
    'chat.inputPlaceholder': 'Ask anything about your project...',
    'chat.projectCompleted': 'Project completed!',
    'chat.projectCompletedMessage': 'Thank you for the information! Our team will analyze your project and contact you soon.',
    
    // Quick Prompts
    'prompts.newProject.title': 'New Project',
    'prompts.newProject.desc': 'Start from scratch',
    'prompts.redesign.title': 'Redesign',
    'prompts.redesign.desc': 'Improve an existing product',
    'prompts.consultation.title': 'Consultation',
    'prompts.consultation.desc': 'Get expert advice',
    'prompts.estimate.title': 'Project Estimate',
    'prompts.estimate.desc': 'Find out cost and timeline',
    'prompts.team.title': 'Team',
    'prompts.team.desc': 'Learn about Cieden',
    'prompts.portfolio.title': 'Portfolio',
    'prompts.portfolio.desc': 'See work examples',
    
    // Project Card
    'projectCard.title': 'Project',
    'projectCard.subtitle': 'Live Project Card',
    'projectCard.completion': 'Completion',
    'projectCard.projectName': 'Project Name',
    'projectCard.projectType': 'Project Type',
    'projectCard.description': 'Description',
    'projectCard.targetAudience': 'Target Audience',
    'projectCard.features': 'Features',
    'projectCard.budget': 'Budget',
    'projectCard.timeline': 'Timeline',
    'projectCard.competitors': 'Competitors',
    'projectCard.website': 'Website',
    'projectCard.waitingForInfo': 'Waiting for information...',
    'projectCard.draft': 'Draft',
    'projectCard.confirmed': 'Confirmed',
    'projectCard.confirm': 'Confirm',
    
    // Chat Messages
    'chat.client': 'Client',
    'chat.assistant': 'Assistant',
    'chat.copyMessage': 'Copy message',
    
    // Language Switcher
    'language.en': 'EN',
    'language.uk': 'UK',
  },
  uk: {
    // Header
    'header.title': '–ê—Å–∏—Å—Ç–µ–Ω—Ç',
    'header.clearSession': '–û—á–∏—Å—Ç–∏—Ç–∏ —Å–µ—Å—ñ—é',
    'header.lightTheme': '–°–≤—ñ—Ç–ª–∞ —Ç–µ–º–∞',
    'header.darkTheme': '–¢–µ–º–Ω–∞ —Ç–µ–º–∞',
    
    // Contact Form
    'contact.title': '–ê—Å–∏—Å—Ç–µ–Ω—Ç',
    'contact.subtitle': '–†–æ–∑–∫–∞–∂—ñ—Ç—å –Ω–∞–º –ø—Ä–æ –≤–∞—à –ø—Ä–æ—î–∫—Ç',
    'contact.namePlaceholder': '–í–∞—à–µ —ñ–º\'—è',
    'contact.emailPlaceholder': 'Email',
    'contact.startButton': '–†–æ–∑–ø–æ—á–∞—Ç–∏ –¥—ñ–∞–ª–æ–≥',
    
    // Chat
    'chat.welcome': '–ü—Ä–∏–≤—ñ—Ç, {name}! üëã',
    'chat.subtitle': '–†–æ–∑–∫–∞–∂—ñ—Ç—å –Ω–∞–º –ø—Ä–æ –≤–∞—à –ø—Ä–æ—î–∫—Ç –∞–±–æ –æ–±–µ—Ä—ñ—Ç—å –æ–¥–∏–Ω –∑ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –Ω–∏–∂—á–µ',
    'chat.inputPlaceholder': '–ó–∞–ø–∏—Ç–∞–π—Ç–µ —â–æ—Å—å –ø—Ä–æ –≤–∞—à –ø—Ä–æ—î–∫—Ç...',
    'chat.projectCompleted': '–ü—Ä–æ—î–∫—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ!',
    'chat.projectCompletedMessage': '–î—è–∫—É—î–º–æ –∑–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é! –ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É—î –≤–∞—à –ø—Ä–æ—î–∫—Ç —Ç–∞ –∑–≤\'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.',
    
    // Quick Prompts
    'prompts.newProject.title': '–ù–æ–≤–∏–π –ø—Ä–æ—î–∫—Ç',
    'prompts.newProject.desc': '–ü–æ—á–∞—Ç–∏ –∑ –Ω—É–ª—è',
    'prompts.redesign.title': '–†–µ–¥–∏–∑–∞–π–Ω',
    'prompts.redesign.desc': '–ü–æ–∫—Ä–∞—â–∏—Ç–∏ —ñ—Å–Ω—É—é—á–∏–π –ø—Ä–æ–¥—É–∫—Ç',
    'prompts.consultation.title': '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è',
    'prompts.consultation.desc': '–û—Ç—Ä–∏–º–∞—Ç–∏ –µ–∫—Å–ø–µ—Ä—Ç–Ω—É –ø–æ—Ä–∞–¥—É',
    'prompts.estimate.title': '–û—Ü—ñ–Ω–∫–∞ –ø—Ä–æ—î–∫—Ç—É',
    'prompts.estimate.desc': '–î—ñ–∑–Ω–∞—Ç–∏—Å—è –≤–∞—Ä—Ç—ñ—Å—Ç—å —Ç–∞ —Ç–µ—Ä–º—ñ–Ω–∏',
    'prompts.team.title': '–ö–æ–º–∞–Ω–¥–∞',
    'prompts.team.desc': '–î—ñ–∑–Ω–∞—Ç–∏—Å—è –ø—Ä–æ Cieden',
    'prompts.portfolio.title': '–ü–æ—Ä—Ç—Ñ–æ–ª—ñ–æ',
    'prompts.portfolio.desc': '–ü–æ–±–∞—á–∏—Ç–∏ –ø—Ä–∏–∫–ª–∞–¥–∏ —Ä–æ–±—ñ—Ç',
    
    // Project Card
    'projectCard.title': '–ü—Ä–æ—î–∫—Ç',
    'projectCard.subtitle': '–ñ–∏–≤–∞ –∫–∞—Ä—Ç–∫–∞ –ø—Ä–æ—î–∫—Ç—É',
    'projectCard.completion': '–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è',
    'projectCard.projectName': '–ù–∞–∑–≤–∞ –ø—Ä–æ—î–∫—Ç—É',
    'projectCard.projectType': '–¢–∏–ø –ø—Ä–æ—î–∫—Ç—É',
    'projectCard.description': '–û–ø–∏—Å',
    'projectCard.targetAudience': '–¶—ñ–ª—å–æ–≤–∞ –∞—É–¥–∏—Ç–æ—Ä—ñ—è',
    'projectCard.features': '–§—É–Ω–∫—Ü—ñ—ó',
    'projectCard.budget': '–ë—é–¥–∂–µ—Ç',
    'projectCard.timeline': '–¢–µ—Ä–º—ñ–Ω–∏',
    'projectCard.competitors': '–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–∏',
    'projectCard.website': '–í–µ–±-—Å–∞–π—Ç',
    'projectCard.waitingForInfo': '–û—á—ñ–∫—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é...',
    'projectCard.draft': '–ß–µ—Ä–Ω–µ—Ç–∫–∞',
    'projectCard.confirmed': '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ',
    'projectCard.confirm': '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏',
    
    // Chat Messages
    'chat.client': '–ö–ª—ñ—î–Ω—Ç',
    'chat.assistant': '–ê—Å–∏—Å—Ç–µ–Ω—Ç',
    'chat.copyMessage': '–ö–æ–ø—ñ—é–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è',
    
    // Language Switcher
    'language.en': 'EN',
    'language.uk': 'UK',
  }
};

export function LanguageProvider({ children }: { children: React.ReactNode }) {
  const [language, setLanguage] = useState<Language>('en');

  useEffect(() => {
    // Load language from localStorage
    const savedLanguage = localStorage.getItem('language') as Language;
    if (savedLanguage && (savedLanguage === 'en' || savedLanguage === 'uk')) {
      setLanguage(savedLanguage);
    }
  }, []);

  const handleSetLanguage = (lang: Language) => {
    setLanguage(lang);
    localStorage.setItem('language', lang);
    // Force re-render by triggering a state update
    setTimeout(() => {
      window.location.reload();
    }, 100);
  };

  const t = (key: string): string => {
    const translation = translations[language][key as keyof typeof translations[typeof language]];
    if (!translation) {
      console.warn(`Translation key not found: ${key}`);
      return key;
    }
    return translation;
  };

  return (
    <LanguageContext.Provider value={{ language, setLanguage: handleSetLanguage, t }}>
      {children}
    </LanguageContext.Provider>
  );
}

export function useLanguage() {
  const context = useContext(LanguageContext);
  if (context === undefined) {
    throw new Error('useLanguage must be used within a LanguageProvider');
  }
  return context;
} 