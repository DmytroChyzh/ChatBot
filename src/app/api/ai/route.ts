import { NextRequest, NextResponse } from 'next/server';
import OpenAI from 'openai';
import Anthropic from '@anthropic-ai/sdk';
import { getChatSession, updateProjectCard } from '../../../lib/firestore';
import { ProjectCardState } from '../../../types/chat';
import { parseProjectInfoFromText } from '../../../utils/parseProjectInfo';

const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });
const anthropic = new Anthropic({ apiKey: process.env.ANTHROPIC_API_KEY });

const SYSTEM_PROMPT = `You are a flexible AI consultant for Cieden. You know everything about Cieden: our cases, team, processes, UX/UI, design, development, website, approaches, values, and expertise.

You communicate with the client as a human: answer any questions about Cieden, give useful advice, share experience, talk about cases, team, website, processes, expertise, approaches, values, technologies, anything that may be helpful.

üéØ TYPEFORM-STYLE PROJECT CONSULTATION:
You follow a structured but flexible approach similar to Typeform, asking ONE question at a time and adapting based on responses.

üìã CORE QUESTIONS FLOW (adapt order based on client responses):
1. **Project Type**: What type of project are you hiring for?
2. **Product Type**: What type of product or service are you building?
3. **Specifications**: Do you have product specifications ready?
4. **Goal**: What is your goal?
5. **Time Commitment**: What level of time commitment will you require?
6. **Team Size**: How many designers do you need?
7. **Duration**: How long do you need help with design?
8. **Start Date**: When do you need us to start?
9. **Scope**: How big is the scope of work?
10. **Services**: What services do you need?
11. **Complexity**: How complex is your app?

üß† ADAPTIVE QUESTION STRATEGY:
- Ask questions in logical order, but adapt based on client's previous answers
- If client mentions "mobile app" ‚Üí ask about platforms (Android/iOS)
- If client says "B2B" ‚Üí ask about integrations and enterprise features
- If client mentions "MVP" ‚Üí focus on essential features first
- Always build on previous information naturally

üí° SMART BUTTON GENERATION:
Provide 4-5 contextual buttons that match the question type:

**Project Type**: ["Website", "Mobile App", "E-commerce", "Dashboard", "Not sure"]
**Product Type**: ["B2C SaaS", "B2B SaaS", "Business automation", "Marketplace", "Other"]
**Specifications**: ["Need research first", "Have clear ideas", "Have written specs", "Need help documenting"]
**Goal**: ["Design MVP", "Build launchpad", "Full product design", "Need consultation"]
**Time Commitment**: ["Full time (40 hrs/week)", "Part time", "One time project", "Fixed price service"]
**Team Size**: ["One designer", "Multiple designers", "Cross-functional team", "Decide later"]
**Duration**: ["A week", "2-3 weeks", "1-3 months", "3-6 months", "6+ months"]
**Start Date**: ["Immediately", "1-2 weeks", "In a month", "1-3 months", "3+ months"]
**Scope**: ["Small project", "Medium project", "Large project", "Enterprise project", "Not sure"]
**Services**: ["UX Research", "UI Design", "Prototyping", "Design System", "All services"]
**Complexity**: ["Essential (simple)", "Advanced (complex)", "Enterprise-grade", "Need assessment"]

‚ùóÔ∏èCRITICAL RULES:
1. Ask ONLY ONE question per response
2. Always provide SuggestedAnswers with 4-5 contextual options
3. Never put suggestions in the main text - only in SuggestedAnswers block
4. Adapt questions based on client's previous answers
5. Be conversational and helpful, not robotic

All answers must be maximally useful for future estimation and manager: gather details that help understand real goals, expectations, problems, and client wishes.

‚ùóÔ∏èNever insert SuggestedAnswers into the client text. All suggestions must be ONLY in a special SuggestedAnswers block after JSON, and NEVER in the client text. If you break this rule ‚Äî your answer will not be accepted!

No service lines, JSON, or suggestions in the client text.

Format:
---
Your single question here

SuggestedAnswers:
["Option 1", "Option 2", "Option 3", "Option 4", "Option 5"]
---
`;

// –†–æ–∑—É–º–Ω–∏–π –ø–∞—Ä—Å–µ—Ä: —à—É–∫–∞—î–º–æ JSON —É —Ç–µ–∫—Å—Ç—ñ
function extractJSON(str) {
  const first = str.indexOf('{');
  const last = str.lastIndexOf('}');
  if (first !== -1 && last !== -1 && last > first) {
    try {
      return JSON.parse(str.slice(first, last + 1));
    } catch {
      return null;
    }
  }
  return null;
}

function parseSuggestedAnswers(text: string): string[] {
  // –®—É–∫–∞—î–º–æ SuggestedAnswers –±–ª–æ–∫
  const match = text.match(/SuggestedAnswers:\s*\[([^\]]+)\]/i);
  let arr: string[] = [];
  if (match) {
    arr = match[1].split(',').map(s => s.replace(/['"\s]/g, '').trim()).filter(Boolean);
  } else {
    // Fallback - —à—É–∫–∞—î–º–æ –º–∞—Ä–∫–¥–∞—É–Ω-—Å–ø–∏—Å–æ–∫
    const mdList = text.match(/\n\- ([^\n]+)/g);
    if (mdList) {
      arr = mdList.map(s => s.replace(/\n\- /g, '').trim());
    }
  }
  // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ª–∏—à–µ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ –ø—ñ–¥–∫–∞–∑–∫–∏
  return Array.from(new Set(arr.filter(Boolean)));
}

// –†–æ–∑—É–º–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∫–Ω–æ–ø–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤—ñ Typeform —Å—Ç—Ä—É–∫—Ç—É—Ä–∏
function generateSmartButtons(message: string, conversationHistory: any[]): string[] {
  const currentMessage = message.toLowerCase();
  
  // –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∏—Ö –∫–Ω–æ–ø–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤—ñ Typeform
  if (currentMessage.includes('—Ç–∏–ø') && currentMessage.includes('–ø—Ä–æ–µ–∫—Ç')) {
    return ["–í–µ–±-—Å–∞–π—Ç", "–ú–æ–±—ñ–ª—å–Ω–∏–π –¥–æ–¥–∞—Ç–æ–∫", "E-commerce", "Dashboard", "–ù–µ –∑–Ω–∞—é"];
  }
  
  if (currentMessage.includes('–ø—Ä–æ–¥—É–∫—Ç') || currentMessage.includes('—Å–µ—Ä–≤—ñ—Å')) {
    return ["B2C SaaS", "B2B SaaS", "Business automation", "Marketplace", "–Ü–Ω—à–µ"];
  }
  
  if (currentMessage.includes('—Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—ó') || currentMessage.includes('–≥–æ—Ç–æ–≤–Ω—ñ—Å—Ç—å')) {
    return ["–ü–æ—Ç—Ä—ñ–±–Ω–µ –¥–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è", "–Ñ —á—ñ—Ç–∫—ñ —ñ–¥–µ—ó", "–ì–æ—Ç–æ–≤—ñ —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—ó", "–ü–æ—Ç—Ä—ñ–±–Ω–∞ –¥–æ–ø–æ–º–æ–≥–∞"];
  }
  
  if (currentMessage.includes('–º–µ—Ç–∞') || currentMessage.includes('—Ü—ñ–ª—å')) {
    return ["–î–∏–∑–∞–π–Ω MVP", "–°—Ç–≤–æ—Ä–∏—Ç–∏ launchpad", "–ü–æ–≤–Ω–∏–π –¥–∏–∑–∞–π–Ω –ø—Ä–æ–¥—É–∫—Ç—É", "–ü–æ—Ç—Ä—ñ–±–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è"];
  }
  
  if (currentMessage.includes('—á–∞—Å') && currentMessage.includes('—Ä–æ–±–æ—Ç–∞')) {
    return ["Full time (40 –≥–æ–¥/—Ç–∏–∂–¥–µ–Ω—å)", "Part time", "–û–¥–Ω–æ—Ä–∞–∑–æ–≤–∏–π –ø—Ä–æ–µ–∫—Ç", "–§—ñ–∫—Å–æ–≤–∞–Ω–∞ —Ü—ñ–Ω–∞"];
  }
  
  if (currentMessage.includes('–¥–∏–∑–∞–π–Ω–µ—Ä') || currentMessage.includes('–∫–æ–º–∞–Ω–¥–∞')) {
    return ["–û–¥–∏–Ω –¥–∏–∑–∞–π–Ω–µ—Ä", "–ö—ñ–ª—å–∫–∞ –¥–∏–∑–∞–π–Ω–µ—Ä—ñ–≤", "–ö—Ä–æ—Å—Å-—Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–∞ –∫–æ–º–∞–Ω–¥–∞", "–í–∏—Ä—ñ—à—É –ø—ñ–∑–Ω—ñ—à–µ"];
  }
  
  if (currentMessage.includes('—Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å') || currentMessage.includes('–¥–æ–≤–≥–æ')) {
    return ["–¢–∏–∂–¥–µ–Ω—å", "2-3 —Ç–∏–∂–Ω—ñ", "1-3 –º—ñ—Å—è—Ü—ñ", "3-6 –º—ñ—Å—è—Ü—ñ–≤", "6+ –º—ñ—Å—è—Ü—ñ–≤"];
  }
  
  if (currentMessage.includes('–ø–æ—á–∞—Ç–∏') || currentMessage.includes('—Å—Ç–∞—Ä—Ç')) {
    return ["–ù–µ–≥–∞–π–Ω–æ", "1-2 —Ç–∏–∂–Ω—ñ", "–ß–µ—Ä–µ–∑ –º—ñ—Å—è—Ü—å", "1-3 –º—ñ—Å—è—Ü—ñ", "3+ –º—ñ—Å—è—Ü—ñ"];
  }
  
  if (currentMessage.includes('–æ–±—Å—è–≥') || currentMessage.includes('—Ä–æ–∑–º—ñ—Ä')) {
    return ["–ú–∞–ª–∏–π –ø—Ä–æ–µ–∫—Ç", "–°–µ—Ä–µ–¥–Ω—ñ–π –ø—Ä–æ–µ–∫—Ç", "–í–µ–ª–∏–∫–∏–π –ø—Ä–æ–µ–∫—Ç", "Enterprise –ø—Ä–æ–µ–∫—Ç", "–ù–µ –∑–Ω–∞—é"];
  }
  
  if (currentMessage.includes('–ø–æ—Å–ª—É–≥–∏') || currentMessage.includes('—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ')) {
    return ["UX Research", "UI Design", "Prototyping", "Design System", "–í—Å—ñ –ø–æ—Å–ª—É–≥–∏"];
  }
  
  if (currentMessage.includes('—Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å') || currentMessage.includes('—Å–∫–ª–∞–¥–Ω–∏–π')) {
    return ["Essential (–ø—Ä–æ—Å—Ç–∏–π)", "Advanced (—Å–∫–ª–∞–¥–Ω–∏–π)", "Enterprise-grade", "–ü–æ—Ç—Ä—ñ–±–Ω–∞ –æ—Ü—ñ–Ω–∫–∞"];
  }
  
  // –ó–∞–≥–∞–ª—å–Ω—ñ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–µ–≤–∏–∑–Ω–∞—á–µ–Ω–∏—Ö —Å–∏—Ç—É–∞—Ü—ñ–π
  return ["–¢–∞–∫", "–ù—ñ", "–ù–µ –∑–Ω–∞—é", "–ü–æ—Ç—Ä—ñ–±–Ω–∞ –¥–æ–ø–æ–º–æ–≥–∞", "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏"];
}

// –û—á–∏—â–µ–Ω–Ω—è —Ç–∞ –º–∞–ø—ñ–Ω–≥ –ø—ñ–¥ ProjectCardState
function cleanProjectInfo(raw: any, prevCard?: ProjectCardState): Partial<ProjectCardState> {
  const allowed = [
    'projectName',
    'projectType',
    'description',
    'targetAudience',
    'features',
    'budget',
    'timeline',
    'competitors',
    'website',
  ];
  const cleaned: any = {};
  for (const key of allowed) {
    const prev = prevCard?.[key];
    const value = raw[key];
    if (value && typeof value === 'object' && 'value' in value) {
      // –Ø–∫—â–æ –≤–∂–µ —î final ‚Äî –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—É—î–º–æ
      if (prev && prev.status === 'final') {
        cleaned[key] = prev;
      } else {
        cleaned[key] = { value: value.value, status: 'draft' };
      }
    }
  }
  return cleaned;
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–±–æ—Ä—É AI –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ
function shouldUseClaude(message: string, conversationHistory: any[]): boolean {
  // –ü—Ä–æ—Å—Ç—ñ –ø–∏—Ç–∞–Ω–Ω—è - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Claude Haiku (—à–≤–∏–¥—à–µ)
  const simplePatterns = [
    /^(–ø—Ä–∏–≤—ñ—Ç|hello|hi|–¥–æ–±—Ä–æ–≥–æ –¥–Ω—è|–¥–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É)/i,
    /^(–¥—è–∫—É—é|—Å–ø–∞—Å–∏–±–æ|thank you|thanks)/i,
    /^(—Ç–∞–∫|–Ω—ñ|yes|no|ok|–æ–∫)/i,
    /^(—â–æ|what|—è–∫|how|–∫–æ–ª–∏|when|–¥–µ|where)/i
  ];
  
  // –°–∫–ª–∞–¥–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ GPT-3.5 (—è–∫—ñ—Å–Ω—ñ—à–µ)
  const complexPatterns = [
    /–ø—Ä–æ–µ–∫—Ç|project|–¥–∏–∑–∞–π–Ω|design|—Ä–æ–∑—Ä–æ–±–∫–∞|development/i,
    /–æ—Ü—ñ–Ω–∫–∞|estimate|—Ü—ñ–Ω–∞|price|–±—é–¥–∂–µ—Ç|budget/i,
    /—Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å|functionality|–º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ|features/i
  ];
  
  const isSimple = simplePatterns.some(pattern => pattern.test(message));
  const isComplex = complexPatterns.some(pattern => pattern.test(message));
  
  // –Ø–∫—â–æ —î API –∫–ª—é—á Claude —ñ –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ—Å—Ç–µ - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Claude
  return process.env.ANTHROPIC_API_KEY && isSimple && !isComplex;
}

export async function POST(req: NextRequest) {
  const { message, conversationHistory = [], sessionId } = await req.json();

  // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–æ–∑–º–æ–≤–∏
  const conversationContext = conversationHistory.length > 0 
    ? conversationHistory.map((msg: any) => ({
        role: msg.role,
        content: msg.content
      }))
    : [];

  let completion;
  
  // –í–∏–±–∏—Ä–∞—î–º–æ AI –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ
  if (shouldUseClaude(message, conversationHistory)) {
    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Claude Haiku –¥–ª—è –ø—Ä–æ—Å—Ç–∏—Ö –ø–∏—Ç–∞–Ω—å
    try {
      completion = await anthropic.messages.create({
        model: "claude-3-haiku-20240307",
        max_tokens: 1000,
        system: SYSTEM_PROMPT,
        messages: conversationContext.concat([{ role: "user", content: message }])
      });
    } catch (error) {
      console.log('Claude failed, falling back to GPT-3.5:', error);
      // Fallback –¥–æ GPT-3.5
      completion = await openai.chat.completions.create({
        model: "gpt-3.5-turbo",
        messages: [
          { role: "system", content: SYSTEM_PROMPT },
          ...conversationContext,
          { role: "user", content: message }
        ],
        max_tokens: 1000,
        temperature: 0.7
      });
    }
  } else {
    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ GPT-3.5 –¥–ª—è —Å–∫–ª–∞–¥–Ω–∏—Ö –ø–∏—Ç–∞–Ω—å
    completion = await openai.chat.completions.create({
      model: "gpt-3.5-turbo",
      messages: [
        { role: "system", content: SYSTEM_PROMPT },
        ...conversationContext,
        { role: "user", content: message }
      ],
      max_tokens: 1000,
      temperature: 0.7
    });
  }

  try {
    // –û–±—Ä–æ–±–ª—è—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏–ø—É AI
    let rawContent = '';
    if (completion.choices) {
      // OpenAI response
      rawContent = completion.choices[0].message.content || '';
    } else if (completion.content) {
      // Claude response
      rawContent = Array.isArray(completion.content) 
        ? completion.content.map(block => block.text).join('')
        : completion.content;
    }
    
    let content = rawContent;
    // –í–∏–¥–∞–ª—è—î–º–æ —Å–ª—É–∂–±–æ–≤—ñ —Ä—è–¥–∫–∏ (JSON, SuggestedAnswers) –∑ —Ç–µ–∫—Å—Ç—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    content = content.replace(/JSON:[\s\S]*?(SuggestedAnswers:|---|$)/gi, '').replace(/SuggestedAnswers:[\s\S]*?(---|$)/gi, '').replace(/SUGGESTED:\s*\[[^\]]*\]/gi, '').replace(/\n{2,}/g, '\n').trim();
    
    let suggestedAnswers = parseSuggestedAnswers(rawContent);
    
    // –Ø–∫—â–æ AI –Ω–µ –Ω–∞–¥–∞–≤ –∫–Ω–æ–ø–∫–∏, –≥–µ–Ω–µ—Ä—É—î–º–æ —Ä–æ–∑—É–º–Ω—ñ –∫–Ω–æ–ø–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
    if (suggestedAnswers.length === 0) {
      suggestedAnswers = generateSmartButtons(message, conversationHistory);
    }
    
    return NextResponse.json({
      content,
      completionStatus: "incomplete",
      nextQuestions: [],
      shouldTriggerWorkers: false,
      suggestedAnswers
    });
  } catch (error) {
    console.error('Error processing AI response:', error);
    return NextResponse.json({
      content: "Sorry, an error occurred while processing the response.",
      completionStatus: "incomplete",
      nextQuestions: [],
      shouldTriggerWorkers: false,
      suggestedAnswers: []
    });
  }
} 