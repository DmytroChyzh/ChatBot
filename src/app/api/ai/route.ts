import { NextRequest, NextResponse } from 'next/server';
import OpenAI from 'openai';
import Anthropic from '@anthropic-ai/sdk';
import { getChatSession, updateProjectCard } from '../../../lib/firestore';
import { ProjectCardState } from '../../../types/chat';
import { parseProjectInfoFromText } from '../../../utils/parseProjectInfo';
import typeformQuestions from '../../../data/typeform-questions.json';
import { getFeaturesByProjectType } from '../../../utils/projectFeatures';

const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });
const anthropic = new Anthropic({ apiKey: process.env.ANTHROPIC_API_KEY });

const SYSTEM_PROMPT = (language: string) => `You are a friendly AI consultant for Cieden - a UI/UX design company.

üö® CRITICAL: ALWAYS ANSWER EVERY QUESTION!
- ALWAYS respond to every question with helpful information
- NEVER say "I don't know" or "I can't find information" or "–í–∏–±–∞—á—Ç–µ, –Ω–µ –∑–Ω–∞–π—à–æ–≤ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó"
- If asked about unrelated topics ‚Üí politely redirect to Cieden and design services
- Be a helpful consultant, not a search engine

üè¢ COMPANY FOCUS:
Cieden provides ONLY design services:
- UX/UI Design
- Design Systems  
- Prototyping
- User Research
- Design Consulting

We do NOT provide: development, coding, programming, or technical implementation.

üìã COMPANY INFO:
- We are a UI/UX design company
- We help businesses create beautiful, user-friendly digital products
- Our team specializes in user research, interface design, and prototyping
- We work with startups, enterprises, and everything in between
- We focus on creating designs that users love and businesses need

üåç LANGUAGE DETECTION:
- Automatically detect ANY client language
- Always respond in the same language the client uses
- Never mix languages in a single response

üéØ SCOPE CLARITY:
- Focus on Cieden and its design services
- If client asks about unrelated topics ‚Üí politely redirect to design
- If client asks about development/coding ‚Üí politely redirect to design
- Always bring conversation back to design and the company

üí¨ CONVERSATION STYLE:
- Keep responses under 50 words
- Be friendly and conversational
- Use light emojis when appropriate
- Ask ONE question at a time
- Acknowledge answers before asking next
- Vary greetings slightly to feel natural

üéØ SMART CONSULTATION APPROACH:
When client mentions ANY project (mobile app, website, e-commerce, etc.):
1. ACKNOWLEDGE their project interest
2. ALWAYS START by asking about main business goals or problems to solve
3. THEN ask what users should be able to do in the product (user scenarios)
4. IF client says "I don't know" or "not sure" ‚Üí SHOW user scenarios/stories ONLY:
   ‚Ä¢ order products
   ‚Ä¢ book services
   ‚Ä¢ receive notifications
   ‚Ä¢ leave reviews
5. NEVER show features until client confirms at least one scenario
6. ONLY AFTER client chooses scenarios ‚Üí show relevant features for those scenarios
7. THEN provide pricing information

When client asks about pricing/cost:
1. ACKNOWLEDGE their question about cost
2. EXPLAIN more info is needed for accurate estimate
3. START with business goals and problems to solve
4. THEN ask about user scenarios
5. SHOW relevant features for chosen scenarios
6. THEN ask follow-up questions

üö® CRITICAL RULE: NEVER show features before scenarios are confirmed!

üìã EXAMPLE RESPONSES:

Client: "–•–æ—á—É –º–æ–±—ñ–ª—å–Ω–∏–π –∑–∞—Å—Ç–æ—Å—É–Ω–æ–∫"
You: "–ß—É–¥–æ–≤–æ! üöÄ –Ø–∫—É –≥–æ–ª–æ–≤–Ω—É –∑–∞–¥–∞—á—É –≤–∏ —Ö–æ—á–µ—Ç–µ –≤–∏—Ä—ñ—à–∏—Ç–∏ —Ü–∏–º –¥–æ–¥–∞—Ç–∫–æ–º? –ù–∞–ø—Ä–∏–∫–ª–∞–¥: –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —ó–∂—ñ, –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è, –æ–Ω–ª–∞–π–Ω-–ø—Ä–æ–¥–∞–∂ —á–∏ —ñ–Ω—à–µ?"

Client: "How much for a business website?"
You: "I'd love to help! Business websites typically cost $3,000‚Äì8,000 (based on our projects). Could you tell me your main goal: attract clients, sell products, or share company info?"

Client: "I don't know what users should do"
You: "No problem üôÇ Here are common user scenarios for apps like this:
‚Ä¢ order products
‚Ä¢ book services
‚Ä¢ receive notifications
‚Ä¢ leave reviews
Which of these scenarios sound relevant to your idea?"

Client: "I don't know what features I need"
You: "Let me first understand what users should do in your app. Here are common scenarios:
‚Ä¢ order products
‚Ä¢ book services
‚Ä¢ receive notifications
‚Ä¢ leave reviews
Which scenarios are important for your users?"

Client: "I don't know" / "not sure"
You: "No worries! Let me show you typical user scenarios:
‚Ä¢ order products
‚Ä¢ book services
‚Ä¢ receive notifications
‚Ä¢ leave reviews
Which of these sound relevant to your project?"

Client: "I want users to order products and receive notifications"
You: "Perfect! For those scenarios, you'll need features like: product catalog, shopping cart, payment system, order tracking, push notifications. Does this sound right for your project?"

Client: "—Ç–∏ —Ö—Ç–æ?" / "who are you?"
You: "–Ø AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –∫–æ–º–ø–∞–Ω—ñ—ó Cieden! –ú–∏ –∑–∞–π–º–∞—î–º–æ—Å—è UI/UX –¥–∏–∑–∞–π–Ω–æ–º, —Å—Ç–≤–æ—Ä—é—î–º–æ –∫—Ä–∞—Å–∏–≤—ñ —Ç–∞ –∑—Ä—É—á–Ω—ñ —Ü–∏—Ñ—Ä–æ–≤—ñ –ø—Ä–æ–¥—É–∫—Ç–∏. –ß–∏–º –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏ –∑ –≤–∞—à–∏–º –ø—Ä–æ–µ–∫—Ç–æ–º?"

Client: "—â–æ –≤–∏ —Ä–æ–±–∏—Ç–µ?" / "what do you do?"
You: "Cieden - —Ü–µ –¥–∏–∑–∞–π–Ω-–∫–æ–º–ø–∞–Ω—ñ—è! –ú–∏ —Å—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∏, –ø—Ä–æ–≤–æ–¥–∂—É—î–º–æ –¥–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —Ä–æ–∑—Ä–æ–±–ª—è—î–º–æ –ø—Ä–æ—Ç–æ—Ç–∏–ø–∏. –Ø–∫—â–æ —É –≤–∞—Å —î —ñ–¥–µ—è –¥–ª—è –¥–æ–¥–∞—Ç–∫—É –∞–±–æ —Å–∞–π—Ç—É - –º–∏ –¥–æ–ø–æ–º–æ–∂–µ–º–æ —ó—ó —Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏!"

Client: "—è–∫ –ø—Ä–∞—Ü—é—î—Ç–µ?" / "how do you work?"
You: "–ú–∏ –ø—Ä–∞—Ü—é—î–º–æ –≤ –∫–æ–º–∞–Ω–¥–∞—Ö 2-4 –¥–∏–∑–∞–π–Ω–µ—Ä—ñ–≤, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—É—á–∞—Å–Ω—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ (Figma, Sketch), –ø—Ä–æ–≤–æ–¥–∏–º–æ –¥–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —Å—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–æ—Ç–æ—Ç–∏–ø–∏. –°–µ—Ä–µ–¥–Ω—ñ–π –ø—Ä–æ–µ–∫—Ç –∑–∞–π–º–∞—î 4-12 —Ç–∏–∂–Ω—ñ–≤. –†–æ–∑–∫–∞–∂—ñ—Ç—å –ø—Ä–æ –≤–∞—à –ø—Ä–æ–µ–∫—Ç!"

Client: "—Å–∫—ñ–ª—å–∫–∏ –∫–æ—à—Ç—É—î?" / "how much does it cost?"
You: "–í–∞—Ä—Ç—ñ—Å—Ç—å –∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ –ø—Ä–æ–µ–∫—Ç—É. –ù–∞–ø—Ä–∏–∫–ª–∞–¥, —Å–∞–π—Ç –¥–ª—è –±—ñ–∑–Ω–µ—Å—É –∫–æ—à—Ç—É—î $3,000-8,000, –∞ –º–æ–±—ñ–ª—å–Ω–∏–π –¥–æ–¥–∞—Ç–æ–∫ - $8,000-25,000. –ú–æ–∂—É –¥–∞—Ç–∏ —Ç–æ—á–Ω—ñ—à—É –æ—Ü—ñ–Ω–∫—É, —è–∫—â–æ —Ä–æ–∑–∫–∞–∂–µ—Ç–µ –ø—Ä–æ –≤–∞—à –ø—Ä–æ–µ–∫—Ç!"

Client: "–¥–µ –≤–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?" / "where are you located?"
You: "–ú–∏ –ø—Ä–∞—Ü—é—î–º–æ –æ–Ω–ª–∞–π–Ω –∑ –∫–ª—ñ—î–Ω—Ç–∞–º–∏ –ø–æ –≤—Å—å–æ–º—É —Å–≤—ñ—Ç—É! –ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–æ–∑–∫–∏–¥–∞–Ω–∞ –ø–æ —Ä—ñ–∑–Ω–∏—Ö –∫—Ä–∞—ó–Ω–∞—Ö, –∞–ª–µ –º–∏ –∑–∞–≤–∂–¥–∏ –Ω–∞ –∑–≤'—è–∑–∫—É. –ß–∏ —î —É –≤–∞—Å –ø—Ä–æ–µ–∫—Ç, –∑ —è–∫–∏–º –º–æ–∂–µ–º–æ –¥–æ–ø–æ–º–æ–≥—Ç–∏?"

üéØ SMART QUESTIONING:
- Build on previous answers
- If client says "I don't know" ‚Üí suggest examples
- Never repeat questions already asked
- Adapt questions based on context
- Focus on business goals behind the project

‚úÖ ALWAYS RESPOND TO EVERY QUESTION:
- Answer ALL questions the client asks
- If client asks "Who are you?" ‚Üí explain you're Cieden's AI consultant
- If client asks about company ‚Üí share company information
- If client asks about services ‚Üí explain design services
- If client asks about pricing ‚Üí provide pricing information
- If client asks about unrelated topics ‚Üí politely redirect to design services
- NEVER say "I can't find information" or "I don't know"
- ALWAYS provide helpful, relevant information about Cieden

üö´ OFF-TOPIC HANDLING:
If client asks about development/coding:
"I'd love to help with your design needs! We focus on UX/UI design, prototyping, and user research. What kind of design project are you working on?"

‚úÖ CONVERSATION COMPLETION:
When you have enough information:
"Great! I have a good understanding of your project. Let me connect you with our project manager for a detailed estimate and next steps."

üìù RESPONSE FORMAT:
---
Your question or response here
---
`;

// –†–æ–∑—É–º–Ω–∏–π –ø–∞—Ä—Å–µ—Ä: —à—É–∫–∞—î–º–æ JSON —É —Ç–µ–∫—Å—Ç—ñ
function extractJSON(str) {
  const first = str.indexOf('{');
  const last = str.lastIndexOf('}');
  if (first !== -1 && last !== -1 && last > first) {
    try {
      return JSON.parse(str.slice(first, last + 1));
    } catch {
      return null;
    }
  }
  return null;
}

function parseSuggestedAnswers(text: string): string[] {
  // –®—É–∫–∞—î–º–æ SuggestedAnswers –±–ª–æ–∫
  const match = text.match(/SuggestedAnswers:\s*\[([^\]]+)\]/i);
  let arr: string[] = [];
  if (match) {
    arr = match[1].split(',').map(s => s.replace(/['"\s]/g, '').trim()).filter(Boolean);
  } else {
    // Fallback - —à—É–∫–∞—î–º–æ –º–∞—Ä–∫–¥–∞—É–Ω-—Å–ø–∏—Å–æ–∫
    const mdList = text.match(/\n\- ([^\n]+)/g);
    if (mdList) {
      arr = mdList.map(s => s.replace(/\n\- /g, '').trim());
    }
  }
  // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ª–∏—à–µ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ –ø—ñ–¥–∫–∞–∑–∫–∏
  return Array.from(new Set(arr.filter(Boolean)));
}

// –†–û–ó–£–ú–ù–ê –°–ò–°–¢–ï–ú–ê –ö–ù–û–ü–û–ö –ù–ê –û–°–ù–û–í–Ü TYPEFORM –ü–ò–¢–ê–ù–¨
function generateSmartButtons(message: string, conversationHistory: any[], language: string = 'en'): string[] {
  const projectInfo = extractProjectInfo(conversationHistory);
  const lastAIMessage = conversationHistory.filter((msg: any) => msg.role === 'assistant').pop()?.content?.toLowerCase() || '';
  
  console.log('=== SMART BUTTONS DEBUG ===');
  console.log('Project info step:', projectInfo.step);
  console.log('Last AI message:', lastAIMessage);
  
  // –Ø–∫—â–æ AI –Ω–µ –∑–∞–¥–∞—î –ø–∏—Ç–∞–Ω–Ω—è, –∫–Ω–æ–ø–∫–∏ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω—ñ
  if (!lastAIMessage.includes('?')) {
    console.log('AI is not asking a question - no buttons');
    return [];
  }
  
  try {
    // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è –∑ typeform
    const currentQuestion = getCurrentTypeformQuestion(projectInfo.step);
    
    if (currentQuestion && currentQuestion.buttons) {
      console.log('Using typeform question:', currentQuestion.question);
      console.log('Available buttons:', currentQuestion.buttons);
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ AI –∑–∞–¥–∞—î —Å—Ö–æ–∂–µ –ø–∏—Ç–∞–Ω–Ω—è
      const isRelevantQuestion = isQuestionRelevant(lastAIMessage, currentQuestion.type);
      
      if (isRelevantQuestion) {
        console.log('‚úÖ Relevant question detected - showing buttons');
        return currentQuestion.buttons;
      }
    }
  } catch (error) {
    console.log('Error using typeform data:', error);
  }
  
  console.log('No relevant question detected - no buttons');
  return [];
}

// –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è –∑ typeform –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∫—Ä–æ–∫—É
function getCurrentTypeformQuestion(step: number) {
  const typeformData = typeformQuestions;
  const questionIndex = Math.min(step, typeformData.questions.length - 1);
  return typeformData.questions[questionIndex];
}

// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ AI –∑–∞–¥–∞—î —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è
function isQuestionRelevant(aiMessage: string, questionType: string) {
  const keywordsMap: { [key: string]: string[] } = {
    'project_type': ['type', 'project', 'hiring', 'build', 'create', 'develop'],
    'product_type': ['product', 'service', 'building', 'creating', 'developing'],
    'specifications': ['specifications', 'ready', 'ideas', 'documentation', 'research'],
    'goal': ['goal', 'objective', 'purpose', 'want', 'need', 'looking'],
    'time_commitment': ['time', 'commitment', 'hours', 'week', 'schedule'],
    'team_size': ['designers', 'team', 'people', 'members', 'size'],
    'duration': ['long', 'duration', 'months', 'weeks', 'help', 'design'],
    'start_date': ['start', 'begin', 'when', 'immediately', 'timeline'],
    'scope': ['scope', 'size', 'big', 'project', 'work', 'enterprise'],
    'services': ['services', 'need', 'ux', 'ui', 'research', 'prototyping'],
    'complexity': ['complex', 'app', 'simple', 'advanced', 'enterprise']
  };
  
  const keywords = keywordsMap[questionType] || [];
  return keywords.some(keyword => aiMessage.includes(keyword));
}

// –í—Å—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤–∏–¥–∞–ª–µ–Ω—ñ - –≤–æ–Ω–∏ –±—ñ–ª—å—à–µ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω—ñ

// –°–ø—Ä–æ—â–µ–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç—É (–±–µ–∑ –∫–Ω–æ–ø–æ–∫)
function extractProjectInfo(conversationHistory: any[]) {
  const info: any = {
    type: '',
    industry: '',
    features: [],
    budget: '',
    timeline: '',
    step: 0
  };
  
  // –ü—Ä–æ—Å—Ç–∏–π –ø—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –∫—Ä–æ–∫—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
  const userMessages = conversationHistory.filter((msg: any) => msg.role === 'user');
  info.step = Math.min(userMessages.length, 5);
  
  // –ë–∞–∑–æ–≤–µ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –ø—Ä–æ–µ–∫—Ç
  conversationHistory.forEach(msg => {
    const content = msg.content?.toLowerCase() || '';
    
    // Extract project type
    if (content.includes('–≤–µ–±-—Å–∞–π—Ç') || content.includes('website') || content.includes('—Å–∞–π—Ç')) {
      info.type = 'website';
    }
    if (content.includes('–¥–æ–¥–∞—Ç–æ–∫') || content.includes('app') || content.includes('–º–æ–±—ñ–ª—å–Ω–∏–π')) {
      info.type = 'mobile-app';
    }
    if (content.includes('e-commerce') || content.includes('–º–∞–≥–∞–∑–∏–Ω')) {
      info.type = 'ecommerce';
    }
    
    // Extract industry
    if (content.includes('—Ä–µ—Å—Ç–æ—Ä–∞–Ω') || content.includes('–∫–∞—Ñ–µ')) {
      info.industry = 'restaurant';
    }
    if (content.includes('–º–∞–≥–∞–∑–∏–Ω') || content.includes('—Ç–æ—Ä–≥—ñ–≤–ª—è')) {
      info.industry = 'store';
    }
    if (content.includes('–ø–æ—Å–ª—É–≥–∏') || content.includes('–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è')) {
      info.industry = 'services';
    }
    if (content.includes('–∞–≤—Ç–æ') || content.includes('–∞–≤—Ç–æ–º–æ–±—ñ–ª—å')) {
      info.industry = 'automotive';
    }
    
    // Extract budget
    if (content.includes('–¥–æ 10') || content.includes('–º–µ–Ω—à–µ 10')) {
      info.budget = 'under-10k';
    }
    if (content.includes('10-25') || content.includes('10 –¥–æ 25')) {
      info.budget = '10k-25k';
    }
    if (content.includes('25+') || content.includes('–±—ñ–ª—å—à–µ 25')) {
      info.budget = '25k+';
    }
    
    // Extract timeline
    if (content.includes('1-2') || content.includes('—à–≤–∏–¥–∫–æ')) {
      info.timeline = '1-2-months';
    }
    if (content.includes('3-6') || content.includes('—Å–µ—Ä–µ–¥–Ω—ñ–π')) {
      info.timeline = '3-6-months';
    }
    if (content.includes('6+') || content.includes('–¥–æ–≤–≥–æ')) {
      info.timeline = '6+months';
    }
  });
  
  return info;
}

// –û—á–∏—â–µ–Ω–Ω—è —Ç–∞ –º–∞–ø—ñ–Ω–≥ –ø—ñ–¥ ProjectCardState
function cleanProjectInfo(raw: any, prevCard?: ProjectCardState): Partial<ProjectCardState> {
  const allowed = [
    'projectName',
    'projectType',
    'description',
    'targetAudience',
    'features',
    'budget',
    'timeline',
    'competitors',
    'website',
  ];
  const cleaned: any = {};
  for (const key of allowed) {
    const prev = prevCard?.[key];
    const value = raw[key];
    if (value && typeof value === 'object' && 'value' in value) {
      // –Ø–∫—â–æ –≤–∂–µ —î final ‚Äî –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—É—î–º–æ
      if (prev && prev.status === 'final') {
        cleaned[key] = prev;
      } else {
        cleaned[key] = { value: value.value, status: 'draft' };
      }
    }
  }
  return cleaned;
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–±–æ—Ä—É AI –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ
function shouldUseClaude(message: string, conversationHistory: any[]): boolean {
  // –ü—Ä–æ—Å—Ç—ñ –ø–∏—Ç–∞–Ω–Ω—è - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Claude Haiku (—à–≤–∏–¥—à–µ)
  const simplePatterns = [
    /^(–ø—Ä–∏–≤—ñ—Ç|hello|hi|–¥–æ–±—Ä–æ–≥–æ –¥–Ω—è|–¥–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É)/i,
    /^(–¥—è–∫—É—é|—Å–ø–∞—Å–∏–±–æ|thank you|thanks)/i,
    /^(—Ç–∞–∫|–Ω—ñ|yes|no|ok|–æ–∫)/i,
    /^(—â–æ|what|—è–∫|how|–∫–æ–ª–∏|when|–¥–µ|where)/i
  ];
  
  // –°–∫–ª–∞–¥–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ GPT-3.5 (—è–∫—ñ—Å–Ω—ñ—à–µ)
  const complexPatterns = [
    /–ø—Ä–æ–µ–∫—Ç|project|–¥–∏–∑–∞–π–Ω|design|—Ä–æ–∑—Ä–æ–±–∫–∞|development/i,
    /–æ—Ü—ñ–Ω–∫–∞|estimate|—Ü—ñ–Ω–∞|price|–±—é–¥–∂–µ—Ç|budget/i,
    /—Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å|functionality|–º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ|features/i
  ];
  
  const isSimple = simplePatterns.some(pattern => pattern.test(message));
  const isComplex = complexPatterns.some(pattern => pattern.test(message));
  
  // –Ø–∫—â–æ —î API –∫–ª—é—á Claude —ñ –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ—Å—Ç–µ - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Claude
  return process.env.ANTHROPIC_API_KEY && isSimple && !isComplex;
}

export async function POST(req: NextRequest) {
  const { message, conversationHistory = [], sessionId, language = 'en' } = await req.json();

  // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–æ–∑–º–æ–≤–∏ –∑ –ø–æ–≤–Ω–æ—é —ñ—Å—Ç–æ—Ä—ñ—î—é
  const conversationContext = conversationHistory.length > 0 
    ? conversationHistory.map((msg: any) => ({
        role: msg.role,
        content: msg.content
      }))
    : [];

  // –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ñ—É–Ω–∫—Ü—ñ—ó –ø—Ä–æ–µ–∫—Ç—É –¥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
  // –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ —ñ—Å—Ç–æ—Ä—ñ—é —Ä–æ–∑–º–æ–≤–∏ –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∏–ø—É –ø—Ä–æ–µ–∫—Ç—É
  const fullContext = (conversationHistory.map(m => m.content).join(' ') + ' ' + message).toLowerCase();
  
  let projectType = '';
  if (fullContext.includes('–º–æ–±—ñ–ª—å–Ω–∏–π') || fullContext.includes('–∑–∞—Å—Ç–æ—Å—É–Ω–æ–∫') || fullContext.includes('–¥–æ–¥–∞—Ç–æ–∫') || fullContext.includes('app')) {
    projectType = '–º–æ–±—ñ–ª—å–Ω–∏–π –∑–∞—Å—Ç–æ—Å—É–Ω–æ–∫';
  } else if (fullContext.includes('—Å–∞–π—Ç') || fullContext.includes('website') || fullContext.includes('–ª–µ–Ω–¥—ñ–Ω–≥')) {
    projectType = '—Å–∞–π—Ç';
  } else if (fullContext.includes('–º–∞–≥–∞–∑–∏–Ω') || fullContext.includes('e-commerce') || fullContext.includes('–ø—Ä–æ–¥–∞–∂')) {
    projectType = '–º–∞–≥–∞–∑–∏–Ω';
  } else if (fullContext.includes('–¥–∞—à–±–æ—Ä–¥') || fullContext.includes('dashboard') || fullContext.includes('–ø–∞–Ω–µ–ª—å')) {
    projectType = '–¥–∞—à–±–æ—Ä–¥';
  }
  
  // –ù–ï –¥–æ–¥–∞—î–º–æ featuresContext –¥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è - —Ü–µ –ø–æ—Ä—É—à—É—î –ª–æ–≥—ñ–∫—É —Å—Ü–µ–Ω–∞—Ä—ñ—ó–≤
  // const projectFeatures = getFeaturesByProjectType(projectType || message.toLowerCase());
  // const featuresContext = projectFeatures.length > 0 ? 
  //   `\n\nAvailable features for this project type:\n${projectFeatures.map(f => `‚Ä¢ ${f.name} - ${f.description} (${f.priceRange})`).join('\n')}` : '';
    
  console.log('Conversation context:', conversationContext);
  console.log('Current message:', message);
  // console.log('Project features found:', projectFeatures.length);

  let completion;
  
  // –í–∏–±–∏—Ä–∞—î–º–æ AI –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ
  if (shouldUseClaude(message, conversationHistory)) {
    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Claude Haiku –¥–ª—è –ø—Ä–æ—Å—Ç–∏—Ö –ø–∏—Ç–∞–Ω—å
    try {
      completion = await anthropic.messages.create({
        model: "claude-3-haiku-20240307",
        max_tokens: 1000,
        system: SYSTEM_PROMPT(language),
        messages: conversationContext.concat([{ role: "user", content: message }])
      });
    } catch (error) {
      console.log('Claude failed, falling back to GPT-3.5:', error);
      // Fallback –¥–æ GPT-3.5
      completion = await openai.chat.completions.create({
        model: "gpt-3.5-turbo",
        messages: [
          { role: "system", content: SYSTEM_PROMPT(language) },
          ...conversationContext,
          { role: "user", content: message }
        ],
        max_tokens: 1000,
        temperature: 0.3
      });
    }
  } else {
    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ GPT-3.5 –¥–ª—è —Å–∫–ª–∞–¥–Ω–∏—Ö –ø–∏—Ç–∞–Ω—å
    completion = await openai.chat.completions.create({
      model: "gpt-3.5-turbo",
    messages: [
          { role: "system", content: SYSTEM_PROMPT(language) },
      ...conversationContext,
          { role: "user", content: message }
        ],
      max_tokens: 1000,
      temperature: 0.7
    });
  }

  try {
    // –û–±—Ä–æ–±–ª—è—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏–ø—É AI
    let rawContent = '';
    if (completion.choices) {
      // OpenAI response
      rawContent = completion.choices[0].message.content || '';
    } else if (completion.content) {
      // Claude response
      rawContent = Array.isArray(completion.content) 
        ? completion.content.map(block => block.text).join('')
        : completion.content;
    }
    
    let content = rawContent;
    // –í–∏–¥–∞–ª—è—î–º–æ —Å–ª—É–∂–±–æ–≤—ñ —Ä—è–¥–∫–∏ (JSON, SuggestedAnswers) –∑ —Ç–µ–∫—Å—Ç—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    content = content.replace(/JSON:[\s\S]*?(SuggestedAnswers:|---|$)/gi, '').replace(/SuggestedAnswers:[\s\S]*?(---|$)/gi, '').replace(/SUGGESTED:\s*\[[^\]]*\]/gi, '').replace(/\n{2,}/g, '\n').trim();
    
    let suggestedAnswers = parseSuggestedAnswers(rawContent);
    
    // –ö–ù–û–ü–ö–ò –í–ò–î–ê–õ–ï–ù–Ü - –∑–∞–≤–∂–¥–∏ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π –º–∞—Å–∏–≤
    suggestedAnswers = [];
    
    return NextResponse.json({
      content,
      completionStatus: "incomplete",
      nextQuestions: [],
      shouldTriggerWorkers: false,
      suggestedAnswers
    });
  } catch (error) {
    console.error('Error processing AI response:', error);
    return NextResponse.json({
      content: "Sorry, an error occurred while processing the response.",
      completionStatus: "incomplete",
      nextQuestions: [],
      shouldTriggerWorkers: false,
      suggestedAnswers: []
    });
  }
} 