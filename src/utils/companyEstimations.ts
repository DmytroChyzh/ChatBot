import companyEstimations from '../data/company-estimations-database.json';

export interface CompanyProject {
  id: string;
  name: string;
  type: string;
  complexity: string;
  description: string;
  roles?: string[];
  features: string[];
  phases: any;
  totals: {
    total_hours: number;
    total_cost: number;
    timeline_weeks: number;
    team_size: number;
  };
  hourly_rate: number;
  team_capacity?: any;
}

export interface EstimationPatterns {
  hourly_rates: {
    low_complexity: number;
    medium_complexity: number;
    high_complexity: number;
  };
  timeline_multipliers: {
    low_complexity: number;
    medium_complexity: number;
    high_complexity: number;
  };
  team_size_by_complexity: {
    low_complexity: number;
    medium_complexity: number;
    high_complexity: number;
  };
  phase_distribution: {
    research_analysis: number;
    wireframing: number;
    design: number;
    prototyping: number;
    testing: number;
  };
}

export interface ProjectTypeConfig {
  base_hours: number;
  base_cost: number;
  complexity_multipliers: {
    low: number;
    medium: number;
    high: number;
  };
}

/**
 * Get similar projects from company database
 */
export function getSimilarProjects(projectType: string, complexity: string): CompanyProject[] {
  return companyEstimations.projects.filter(project => 
    project.type === projectType && project.complexity === complexity
  );
}

/**
 * Get estimation patterns from company data
 */
export function getEstimationPatterns(): EstimationPatterns {
  return companyEstimations.patterns;
}

/**
 * Get project type configuration
 */
export function getProjectTypeConfig(projectType: string): ProjectTypeConfig | null {
  return companyEstimations.project_types[projectType] || null;
}

/**
 * Calculate realistic estimation based on company data
 */
export function calculateRealisticEstimation(
  projectType: string, 
  complexity: string, 
  additionalFeatures: string[] = [],
  specialRequirements: string[] = []
): {
  minHours: number;
  maxHours: number;
  minPrice: number;
  maxPrice: number;
  timeline: string;
  teamSize: number;
  hourlyRate: number;
} {
  const patterns = getEstimationPatterns();
  const projectConfig = getProjectTypeConfig(projectType);
  const similarProjects = getSimilarProjects(projectType, complexity);
  
  if (!projectConfig) {
    // Fallback to basic calculation
    return {
      minHours: 100,
      maxHours: 200,
      minPrice: 5000,
      maxPrice: 10000,
      timeline: "6-12 —Ç–∏–∂–Ω—ñ–≤",
      teamSize: 2,
      hourlyRate: 50
    };
  }

  // Get hourly rate based on complexity
  const hourlyRate = patterns.hourly_rates[`${complexity}_complexity` as keyof typeof patterns.hourly_rates];
  
  // Calculate base hours and cost
  const complexityMultiplier = projectConfig.complexity_multipliers[complexity as keyof typeof projectConfig.complexity_multipliers];
  const baseHours = Math.round(projectConfig.base_hours * complexityMultiplier);
  const baseCost = Math.round(projectConfig.base_cost * complexityMultiplier);
  
  // Adjust for additional features (each feature adds 10-20% to base)
  const featureMultiplier = 1 + (additionalFeatures.length * 0.15);
  const requirementMultiplier = 1 + (specialRequirements.length * 0.1);
  
  const adjustedHours = Math.round(baseHours * featureMultiplier * requirementMultiplier);
  const adjustedCost = Math.round(baseCost * featureMultiplier * requirementMultiplier);
  
  // Calculate min/max with 20% variance
  const variance = 0.2;
  const minHours = Math.round(adjustedHours * (1 - variance));
  const maxHours = Math.round(adjustedHours * (1 + variance));
  const minPrice = Math.round(adjustedCost * (1 - variance));
  const maxPrice = Math.round(adjustedCost * (1 + variance));
  
  // Calculate timeline based on team size and hours
  const teamSize = patterns.team_size_by_complexity[`${complexity}_complexity` as keyof typeof patterns.team_size_by_complexity];
  const timelineMultiplier = patterns.timeline_multipliers[`${complexity}_complexity` as keyof typeof patterns.timeline_multipliers];
  const baseTimeline = Math.round((adjustedHours / (teamSize * 40)) * timelineMultiplier); // 40 hours per week per person
  const timeline = `${Math.max(2, baseTimeline - 2)}-${baseTimeline + 2} —Ç–∏–∂–Ω—ñ–≤`;
  
  return {
    minHours,
    maxHours,
    minPrice,
    maxPrice,
    timeline,
    teamSize,
    hourlyRate
  };
}

/**
 * Generate detailed phases based on company patterns
 */
export function generateCompanyBasedPhases(
  projectType: string,
  complexity: string,
  minHours: number,
  maxHours: number,
  minPrice: number,
  maxPrice: number,
  language: string = 'uk'
): {
  'ux-research': string;
  'ui-design': string;
  'prototyping': string;
  'design-system': string;
  'mobile-adaptive': string;
  descriptions: {
    'ux-research': string;
    'ui-design': string;
    'prototyping': string;
    'design-system': string;
    'mobile-adaptive': string;
  };
} {
  const patterns = getEstimationPatterns();
  const isUkrainian = language === 'uk';
  
  // Calculate average values
  const avgHours = Math.round((minHours + maxHours) / 2);
  const avgPrice = Math.round((minPrice + maxPrice) / 2);
  
  // Use company patterns for distribution (adapted for UI/UX design phases)
  const hoursDistribution = {
    'ux-research': Math.round(avgHours * patterns.phase_distribution.research_analysis),
    'ui-design': Math.round(avgHours * patterns.phase_distribution.design),
    'prototyping': Math.round(avgHours * patterns.phase_distribution.prototyping),
    'design-system': Math.round(avgHours * patterns.phase_distribution.wireframing),
    'mobile-adaptive': Math.round(avgHours * patterns.phase_distribution.testing)
  };
  
  const priceDistribution = {
    'ux-research': Math.round(avgPrice * patterns.phase_distribution.research_analysis),
    'ui-design': Math.round(avgPrice * patterns.phase_distribution.design),
    'prototyping': Math.round(avgPrice * patterns.phase_distribution.prototyping),
    'design-system': Math.round(avgPrice * patterns.phase_distribution.wireframing),
    'mobile-adaptive': Math.round(avgPrice * patterns.phase_distribution.testing)
  };
  
  // Generate detailed descriptions based on project type and complexity
  const descriptions = generatePhaseDescriptions(projectType, complexity, isUkrainian);
  
  return {
    'ux-research': isUkrainian 
      ? `üîç UX –î–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è (${hoursDistribution['ux-research']} –≥–æ–¥, $${priceDistribution['ux-research']})`
      : `üîç UX Research (${hoursDistribution['ux-research']}h, $${priceDistribution['ux-research']})`,
    
    'ui-design': isUkrainian 
      ? `üé® UI –î–∏–∑–∞–π–Ω (${hoursDistribution['ui-design']} –≥–æ–¥, $${priceDistribution['ui-design']})`
      : `üé® UI Design (${hoursDistribution['ui-design']}h, $${priceDistribution['ui-design']})`,
    
    'prototyping': isUkrainian 
      ? `‚ö° –ü—Ä–æ—Ç–æ—Ç–∏–ø—É–≤–∞–Ω–Ω—è (${hoursDistribution['prototyping']} –≥–æ–¥, $${priceDistribution['prototyping']})`
      : `‚ö° Prototyping (${hoursDistribution['prototyping']}h, $${priceDistribution['prototyping']})`,
    
    'design-system': isUkrainian 
      ? `üìê –î–∏–∑–∞–π–Ω-—Å–∏—Å—Ç–µ–º–∞ (${hoursDistribution['design-system']} –≥–æ–¥, $${priceDistribution['design-system']})`
      : `üìê Design System (${hoursDistribution['design-system']}h, $${priceDistribution['design-system']})`,
    
    'mobile-adaptive': isUkrainian 
      ? `üì± –ú–æ–±—ñ–ª—å–Ω–∞ –∞–¥–∞–ø—Ç–∞—Ü—ñ—è (${hoursDistribution['mobile-adaptive']} –≥–æ–¥, $${priceDistribution['mobile-adaptive']})`
      : `üì± Mobile Adaptive (${hoursDistribution['mobile-adaptive']}h, $${priceDistribution['mobile-adaptive']})`,
    
    descriptions
  };
}

/**
 * Generate detailed descriptions for each phase based on project type and complexity
 */
function generatePhaseDescriptions(projectType: string, complexity: string, isUkrainian: boolean) {
  const baseDescriptions = {
    'ux-research': isUkrainian 
      ? "–ê–Ω–∞–ª—ñ–∑ —Ü—ñ–ª—å–æ–≤–æ—ó –∞—É–¥–∏—Ç–æ—Ä—ñ—ó, –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ñ–≤ —Ç–∞ —Ä–∏–Ω–∫—É. –î–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è –ø–æ—Ç—Ä–µ–± –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–µ—Ä—Å–æ–Ω, –∞–Ω–∞–ª—ñ–∑ –±—ñ–∑–Ω–µ—Å-–≤–∏–º–æ–≥ —Ç–∞ —Ç–µ—Ö–Ω—ñ—á–Ω–∏—Ö –æ–±–º–µ–∂–µ–Ω—å."
      : "Target audience analysis, competitor research, market analysis. User needs research, persona creation, business requirements analysis, and technical constraints study.",
    
    'ui-design': isUkrainian 
      ? "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–∑—É–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∏–ª—é, –≤–∏—Å–æ–∫–æ-–¥–µ—Ç–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ –º–∞–∫–µ—Ç–∏ (mockups), UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏, —ñ–∫–æ–Ω–∫–∏, —Ç–∏–ø–æ–≥—Ä–∞—Ñ—ñ–∫–∞ —Ç–∞ –∫–æ–ª—å–æ—Ä–æ–≤–∞ —Å—Ö–µ–º–∞."
      : "Visual style creation, high-fidelity mockups, UI components, icons, typography and color scheme.",
    
    'prototyping': isUkrainian 
      ? "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏—Ö –ø—Ä–æ—Ç–æ—Ç–∏–ø—ñ–≤ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–æ–≥–æ –¥–æ—Å–≤—ñ–¥—É, –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ —Ç–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –¥–∏–∑–∞–π–Ω-—Ä—ñ—à–µ–Ω—å."
      : "Interactive prototype creation for user experience testing, functionality demonstration, and design validation.",
    
    'design-system': isUkrainian 
      ? "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∏–∑–∞–π–Ω-—Å–∏—Å—Ç–µ–º–∏, –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤, —Å—Ç–∏–ª—ñ–≤, –≥–∞–π–¥–ª–∞–π–Ω—ñ–≤ —Ç–∞ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –¥–ª—è –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç—É."
      : "Design system creation, components, styles, guidelines and element library for project scaling.",
    
    'mobile-adaptive': isUkrainian 
      ? "–ê–¥–∞–ø—Ç–∞—Ü—ñ—è –¥–∏–∑–∞–π–Ω—É –¥–ª—è –º–æ–±—ñ–ª—å–Ω–∏—Ö –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤, –ø–ª–∞–Ω—à–µ—Ç—ñ–≤ —Ç–∞ —Ä—ñ–∑–Ω–∏—Ö —Ä–æ–∑–º—ñ—Ä—ñ–≤ –µ–∫—Ä–∞–Ω—ñ–≤. Responsive –¥–∏–∑–∞–π–Ω —Ç–∞ –º–æ–±—ñ–ª—å–Ω–∞ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è."
      : "Design adaptation for mobile devices, tablets and different screen sizes. Responsive design and mobile optimization."
  };

  // Customize descriptions based on project type
  if (projectType === 'e-commerce') {
    return {
      'ux-research': isUkrainian 
        ? "–ê–Ω–∞–ª—ñ–∑ —Ü—ñ–ª—å–æ–≤–æ—ó –∞—É–¥–∏—Ç–æ—Ä—ñ—ó, –¥–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ñ–≤ –≤ e-commerce, –∞–Ω–∞–ª—ñ–∑ —Ç–æ–≤–∞—Ä–Ω–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥—É, –¥–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è –ø—Ä–æ—Ü–µ—Å—ñ–≤ –ø–æ–∫—É–ø–∫–∏ —Ç–∞ –∫–æ–Ω–≤–µ—Ä—Å—ñ—ó."
        : "Target audience analysis, e-commerce competitor research, product catalog analysis, purchase process and conversion research.",
      
      'ui-design': isUkrainian 
        ? "–î–∏–∑–∞–π–Ω –∫–∞—Ç–∞–ª–æ–≥—É —Ç–æ–≤–∞—Ä—ñ–≤, —Å—Ç–æ—Ä—ñ–Ω–∫–∏ —Ç–æ–≤–∞—Ä—É, –∫–æ—Ä–∑–∏–Ω–∏, –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, –æ—Å–æ–±–∏—Å—Ç–æ–≥–æ –∫–∞–±—ñ–Ω–µ—Ç—É, UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ –¥–ª—è e-commerce."
        : "Product catalog design, product pages, shopping cart, checkout, user account, e-commerce UI components.",
      
      'prototyping': isUkrainian 
        ? "–Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ñ –ø—Ä–æ—Ç–æ—Ç–∏–ø–∏ –ø—Ä–æ—Ü–µ—Å—É –ø–æ–∫—É–ø–∫–∏, —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∑–∏–Ω–∏ —Ç–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ –º–∞–≥–∞–∑–∏–Ω—É."
        : "Interactive purchase process prototypes, cart and checkout testing, store functionality demonstration.",
      
      'design-system': isUkrainian 
        ? "–î–∏–∑–∞–π–Ω-—Å–∏—Å—Ç–µ–º–∞ –¥–ª—è e-commerce: –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ –∫–∞—Ç–∞–ª–æ–≥—É, –∫–æ—Ä–∑–∏–Ω–∏, —Ñ–æ—Ä–º–∏, –∫–Ω–æ–ø–∫–∏, –∫–∞—Ä—Ç–∫–∏ —Ç–æ–≤–∞—Ä—ñ–≤ —Ç–∞ –µ–ª–µ–º–µ–Ω—Ç–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó."
        : "E-commerce design system: catalog components, cart, forms, buttons, product cards and navigation elements.",
      
      'mobile-adaptive': isUkrainian 
        ? "–ú–æ–±—ñ–ª—å–Ω–∞ –∞–¥–∞–ø—Ç–∞—Ü—ñ—è —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω—É, –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –¥–ª—è touch-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ñ–≤, –º–æ–±—ñ–ª—å–Ω–∞ –∫–æ—Ä–∑–∏–Ω–∞ —Ç–∞ –ø—Ä–æ—Ü–µ—Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è."
        : "E-commerce mobile adaptation, touch interface optimization, mobile cart and checkout process."
    };
  }

  if (projectType === 'dashboard') {
    return {
      'ux-research': isUkrainian 
        ? "–ê–Ω–∞–ª—ñ–∑ –±—ñ–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—ñ–≤, –¥–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è –ø–æ—Ç—Ä–µ–± –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–∞—à–±–æ—Ä–¥—É, –∞–Ω–∞–ª—ñ–∑ –¥–∞–Ω–∏—Ö —Ç–∞ –º–µ—Ç—Ä–∏–∫, –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∫–ª—é—á–æ–≤–∏—Ö –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ (KPI)."
        : "Business process analysis, dashboard user needs research, data and metrics analysis, key performance indicators (KPI) definition.",
      
      'ui-design': isUkrainian 
        ? "–î–∏–∑–∞–π–Ω —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É –¥–∞—à–±–æ—Ä–¥—É, —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–∂–µ—Ç—ñ–≤ —Ç–∞ –≥—Ä–∞—Ñ—ñ–∫—ñ–≤, UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∏—Ö –ø–∞–Ω–µ–ª–µ–π, —Ç–µ–º–Ω–∞/—Å–≤—ñ—Ç–ª–∞ —Ç–µ–º–∞."
        : "Dashboard interface design, widget and chart creation, administrative panel UI components, dark/light theme.",
      
      'prototyping': isUkrainian 
        ? "–Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ñ –ø—Ä–æ—Ç–æ—Ç–∏–ø–∏ –¥–∞—à–±–æ—Ä–¥—É –∑ —Ä–æ–±–æ—á–∏–º–∏ –≥—Ä–∞—Ñ—ñ–∫–∞–º–∏, –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –¥–∞–Ω–∏—Ö —Ç–∞ –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ –≤—ñ–¥–∂–µ—Ç–∞–º–∏."
        : "Interactive dashboard prototypes with working charts, data filtering demonstration, and widget interaction.",
      
      'design-system': isUkrainian 
        ? "–î–∏–∑–∞–π–Ω-—Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –¥–∞—à–±–æ—Ä–¥—ñ–≤: –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫—ñ–≤, –≤—ñ–¥–∂–µ—Ç—ñ–≤, —Ç–∞–±–ª–∏—Ü—å, —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ —Ç–∞ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó."
        : "Dashboard design system: chart components, widgets, tables, filters and navigation elements.",
      
      'mobile-adaptive': isUkrainian 
        ? "–ú–æ–±—ñ–ª—å–Ω–∞ –∞–¥–∞–ø—Ç–∞—Ü—ñ—è –¥–∞—à–±–æ—Ä–¥—É, –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –≤—ñ–¥–∂–µ—Ç—ñ–≤ –¥–ª—è touch-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ñ–≤, –º–æ–±—ñ–ª—å–Ω–∞ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—è —Ç–∞ –ø–µ—Ä–µ–≥–ª—è–¥ –¥–∞–Ω–∏—Ö."
        : "Dashboard mobile adaptation, widget optimization for touch interfaces, mobile navigation and data viewing."
    };
  }

  if (projectType === 'web-app') {
    return {
      'ux-research': isUkrainian 
        ? "–ê–Ω–∞–ª—ñ–∑ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏—Ö –≤–∏–º–æ–≥, –¥–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–∏—Ö —Å—Ü–µ–Ω–∞—Ä—ñ—ó–≤, –∞–Ω–∞–ª—ñ–∑ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π –∑ –∑–æ–≤–Ω—ñ—à–Ω—ñ–º–∏ —Å–µ—Ä–≤—ñ—Å–∞–º–∏, —Ç–µ—Ö–Ω—ñ—á–Ω—ñ –æ–±–º–µ–∂–µ–Ω–Ω—è."
        : "Functional requirements analysis, user scenario research, external service integration analysis, technical constraints.",
      
      'ui-design': isUkrainian 
        ? "–ü–æ–≤–Ω–∏–π –¥–∏–∑–∞–π–Ω —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É –≤–µ–±-–¥–æ–¥–∞—Ç–∫—É, UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏, –∞–¥–∞–ø—Ç–∏–≤–Ω–∏–π –¥–∏–∑–∞–π–Ω, –∞–Ω—ñ–º–∞—Ü—ñ—ó —Ç–∞ –º—ñ–∫—Ä–æ-–≤–∑–∞—î–º–æ–¥—ñ—ó."
        : "Complete web application interface design, UI components, responsive design, animations and micro-interactions.",
      
      'prototyping': isUkrainian 
        ? "–ü–æ–≤–Ω–æ—Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ –ø—Ä–æ—Ç–æ—Ç–∏–ø–∏ –∑ —É—Å—ñ–º–∞ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–º–∏ –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏, –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Ä–æ–±–æ—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—ñ–≤ —Ç–∞ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π."
        : "Full-featured prototypes with all interactive elements, working processes and integrations demonstration.",
      
      'design-system': isUkrainian 
        ? "–î–∏–∑–∞–π–Ω-—Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –≤–µ–±-–¥–æ–¥–∞—Ç–∫—É: –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ —Ñ–æ—Ä–º, –∫–Ω–æ–ø–æ–∫, –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó, –º–æ–¥–∞–ª—å–Ω–∏—Ö –≤—ñ–∫–æ–Ω —Ç–∞ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤."
        : "Web application design system: form components, buttons, navigation, modal windows and interactive elements.",
      
      'mobile-adaptive': isUkrainian 
        ? "–ú–æ–±—ñ–ª—å–Ω–∞ –∞–¥–∞–ø—Ç–∞—Ü—ñ—è –≤–µ–±-–¥–æ–¥–∞—Ç–∫—É, –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –¥–ª—è touch-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ñ–≤, –º–æ–±—ñ–ª—å–Ω–∞ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—è —Ç–∞ –≤–∑–∞—î–º–æ–¥—ñ—è."
        : "Web application mobile adaptation, touch interface optimization, mobile navigation and interaction."
    };
  }

  return baseDescriptions;
}

/**
 * Get team size recommendation based on company data
 */
export function getRecommendedTeamSize(projectType: string, complexity: string): number {
  const patterns = getEstimationPatterns();
  return patterns.team_size_by_complexity[`${complexity}_complexity` as keyof typeof patterns.team_size_by_complexity];
}

/**
 * Get timeline recommendation based on company data
 */
export function getRecommendedTimeline(hours: number, teamSize: number, complexity: string): string {
  const patterns = getEstimationPatterns();
  const timelineMultiplier = patterns.timeline_multipliers[`${complexity}_complexity` as keyof typeof patterns.timeline_multipliers];
  const baseWeeks = Math.round((hours / (teamSize * 40)) * timelineMultiplier);
  return `${Math.max(2, baseWeeks - 2)}-${baseWeeks + 2} —Ç–∏–∂–Ω—ñ–≤`;
}
